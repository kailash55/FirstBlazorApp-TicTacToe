#pragma checksum "D:\.NET Projects\.NET Core Projects\BlazorApplications\FirstApp\WebApplicationClient\Pages\Board.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e7d8fc1ec611adbdd5e679c4edbcf1f71ba42d77"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WebApplicationClient.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using WebApplicationClient.Shared;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/board")]
    public class Board : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 26 "D:\.NET Projects\.NET Core Projects\BlazorApplications\FirstApp\WebApplicationClient\Pages\Board.razor"
            
    string status = "";
    string nextPlayer = "X";
    string winner = "";
    bool continueGame = true;
    string[] squares = new string[9]{null, null, null, null, null , null, null, null, null};

    private void HandleClick(int index)
    {
        
        if(squares[index] == null && continueGame){
            squares[index] = nextPlayer;
            if(nextPlayer == "X"){
                nextPlayer = "0";
            }
            else{
                nextPlayer = "X";
            }
        }

        CalculateWinner();
        if(!continueGame){
            status = "winner is "+ winner;
        }
        else if(!(Array.IndexOf(squares,null) >= 0) && continueGame){
            continueGame = false;
            status = "Game Tied";
        }
        
    }

    private void CalculateWinner()
    {
        var lines = new int[8,3]{
            {0,1,2},
            {3,4,5},
            {6,7,8},
            {0,3,6},
            {1,4,7},
            {2,5,8},
            {0,4,8},
            {2,4,6}
            };
        
        for(int i = 0; i<8; i++){
            if(squares[lines[i,0]]!=null
             && squares[lines[i,0]] == squares[lines[i,1]]
             && squares[lines[i,0]] == squares[lines[i,2]]){
                continueGame = false;
                winner = squares[lines[i,0]];
                return;
            }
        }
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
